{
  "_args": [
    [
      {
        "raw": "csv-parser@https://registry.npmjs.org/csv-parser/-/csv-parser-1.9.3.tgz",
        "scope": null,
        "escapedName": "csv-parser",
        "name": "csv-parser",
        "rawSpec": "https://registry.npmjs.org/csv-parser/-/csv-parser-1.9.3.tgz",
        "spec": "https://registry.npmjs.org/csv-parser/-/csv-parser-1.9.3.tgz",
        "type": "remote"
      },
      "/Users/ugur/Desktop/FILISRC/fatihbey/projectf/node_modules/ghost"
    ]
  ],
  "_from": "csv-parser@1.9.3",
  "_id": "csv-parser@1.9.3",
  "_inCache": true,
  "_location": "/ghost/csv-parser",
  "_phantomChildren": {
    "inherits": "2.0.1",
    "xtend": "4.0.1"
  },
  "_requested": {
    "raw": "csv-parser@https://registry.npmjs.org/csv-parser/-/csv-parser-1.9.3.tgz",
    "scope": null,
    "escapedName": "csv-parser",
    "name": "csv-parser",
    "rawSpec": "https://registry.npmjs.org/csv-parser/-/csv-parser-1.9.3.tgz",
    "spec": "https://registry.npmjs.org/csv-parser/-/csv-parser-1.9.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ghost"
  ],
  "_resolved": "https://registry.npmjs.org/csv-parser/-/csv-parser-1.9.3.tgz",
  "_shasum": "097b42862700d2952f0a74fb7d9718eb974c3ada",
  "_shrinkwrap": null,
  "_spec": "csv-parser@https://registry.npmjs.org/csv-parser/-/csv-parser-1.9.3.tgz",
  "_where": "/Users/ugur/Desktop/FILISRC/fatihbey/projectf/node_modules/ghost",
  "author": {
    "name": "mafintosh"
  },
  "bin": {
    "csv-parser": "./bin.js"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/csv-parser/issues"
  },
  "dependencies": {
    "generate-function": "^1.0.1",
    "generate-object-property": "^1.0.0",
    "inherits": "^2.0.1",
    "minimist": "^1.2.0",
    "ndjson": "^1.4.0"
  },
  "description": "Streaming CSV parser that aims for maximum speed as well as compatibility with the csv-spectrum test suite",
  "devDependencies": {
    "bops": "^0.1.1",
    "concat-stream": "^1.4.5",
    "csv-spectrum": "^1.0.0",
    "standard": "^5.4.1",
    "tape": "^4.2.2"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "homepage": "https://github.com/mafintosh/csv-parser",
  "keywords": [
    "csv",
    "parser",
    "fast",
    "json"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "csv-parser",
  "optionalDependencies": {},
  "readme": "# csv-parser\n\nStreaming CSV parser that aims for maximum speed as well as compatibility with the [csv-spectrum](https://npmjs.org/csv-spectrum) CSV acid test suite\n\n```\nnpm install csv-parser\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/csv-parser.svg?style=flat)](http://travis-ci.org/mafintosh/csv-parser)\n![dat](http://img.shields.io/badge/Development%20sponsored%20by-dat-green.svg?style=flat)\n\n`csv-parser` can convert CSV into JSON at at rate of around 90,000 rows per second (perf varies with data, try `bench.js` with your data).\n\n## Usage\n\nSimply instantiate `csv` and pump a csv file to it and get the rows out as objects\n\nYou can use `csv-parser` in the browser with [browserify](http://browserify.org/)\n\n``` js\nvar csv = require('csv-parser')\nvar fs = require('fs')\n\nfs.createReadStream('some-csv-file.csv')\n  .pipe(csv())\n  .on('data', function(data) {\n    console.log('row', data)\n  })\n```\n\nThe data emitted is a normalized JSON object\n\nThe csv constructor accepts the following options as well\n\n``` js\nvar stream = csv({\n  raw: false,     // do not decode to utf-8 strings\n  separator: ',', // specify optional cell separator\n  quote: '\"',     // specify optional quote character\n  escape: '\"',    // specify optional escape character (defaults to quote value)\n  newline: '\\n',  // specify a newline character\n  strict: true    // require column length match headers length\n})\n```\nIt accepts too an array, that specifies the headers for the object returned:\n\n``` js\nvar stream = csv(['index', 'message'])\n\n// Source from somewere with format 12312,Hello World\norigin.pipe(stream)\n  .on('data', function(data) {\n    console.log(data) // Should output { \"index\": 12312, \"message\": \"Hello World\" }\n  })\n```\n\nor in the option object as well\n\n``` js\nvar stream = csv({\n  raw: false,     // do not decode to utf-8 strings\n  separator: ',', // specify optional cell separator\n  quote: '\"',     // specify optional quote character\n  escape: '\"',    // specify optional escape character (defaults to quote value)\n  newline: '\\n',  // specify a newline character\n  headers: ['index', 'message'] // Specifing the headers\n})\n```\n\nIf you do not specify the headers, csv-parser will take the first line of the csv and treat it like the headers\n\n## Command line tool\n\nThere is also a command line tool available. It will convert csv to line delimited JSON.\n\n```\nnpm install -g csv-parser\n```\n\nOpen a shell and run\n\n```\n$ csv-parser --help # prints all options\n$ printf \"a,b\\nc,d\\n\" | csv-parser # parses input\n```\n\n### Options\n\nYou can specify these CLI flags to control the JSON serialization output format\n\n- `outputSeparator` - default `\\n`, what to put between JSON items in the output\n- `beforeOutput` - default empty, what to put at beginning of output\n- `afterOutput` - default `\\n`, what to put at end of output\n\n\nFor example, to produce an object with a JSON array of items as output:\n\n```\n--beforeOutput='{\"items\":[' --afterOutput=]} --outputSeparator=,\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/csv-parser.git"
  },
  "scripts": {
    "test": "standard && tape test/test.js"
  },
  "version": "1.9.3"
}
